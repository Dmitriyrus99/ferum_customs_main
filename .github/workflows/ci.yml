# .github/workflows/ci.yml

name: CI/CD Pipeline

run-name: >-
  🛠️ ${{ github.actor }} запустил CI для ветки ${{ github.ref_name }}

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pre-commit hooks
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install dependencies
        run: pip install --upgrade pre-commit

      - name: Run pre-commit hooks (skip pytest)
        env:
          SKIP: pytest
        run: pre-commit run --all-files --show-diff-on-failure

  tests:
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      CI: 'true'
      MYSQL_ROOT_PASSWORD: root
      ADMIN_PASSWORD: admin
    strategy:
      matrix:
        type: [unit, integration, e2e]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'dev-requirements.txt') }}

      - name: Cache bench
        uses: actions/cache@v3
        with:
          path: ~/.bench
          key: ${{ runner.os }}-bench-${{ hashFiles('patches.txt') }}

      - name: Build and start Frappe Stack
        run: docker compose -f docker-compose.yml up -d --build

      - name: Wait for Frappe site to be ready
        run: |
          echo "Waiting for Frappe site to become available..."
          timeout=300
          start_time=$(date +%s)
          SITE_HOST="http://localhost:8000"
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -ge $timeout ]; then
              echo "::error::Timeout: Site did not become ready in ${timeout} seconds."
              docker compose logs frappe
              exit 1
            fi
            status_code=$(curl -s -o /dev/null -w "%{http_code}" $SITE_HOST/api/method/ping || echo "000")
            if [ "$status_code" -eq 200 ]; then
              echo "Site is ready! Status code: $status_code."
              break
            else
              echo "Site not ready yet (status: $status_code). Retrying in 15 seconds..."
              sleep 15
            fi
          done

      - name: Show bench config
        run: docker compose exec -T frappe bench show-config

      - name: Run ${{ matrix.type }} tests inside container
        run: >
          docker compose exec -T frappe sh -c "
          mkdir -p /workspace/reports &&
          pytest /workspace/ferum_customs/ferum_customs/tests/${{ matrix.type }} \
          --junitxml=/workspace/reports/${{ matrix.type }}-results.xml \
          --maxfail=1"

      - name: Upload ${{ matrix.type }} test report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.type }}-test-report
          path: reports/${{ matrix.type }}-results.xml

      - name: Stop Frappe Stack
        if: always()
        run: docker compose down -v
